
var os = require('os');
var fs = require('fs');
var util = require('util');
var assert = require('assert');
var _ = require('underscore');
require('../common/MoreUnderscore');

exports.CodeGen = CodeGen;
exports.FileGen = FileGen;

function CodeGen(filename) {
  this.contents = [];
  this.filename = filename;

  this.subs = {};
  this.subsPattern = null;
};

function withoutGeneratedLine(t) {
  return t.replace(/\/\* Generated by .* \*\/\n/g, '');
}


CodeGen.prototype.end = function() {
  if (/\.(c|cc|cpp|h)$/.exec(this.filename)) {
    this.cIndent();
  }
  if (/\.h$/.exec(this.filename)) {
    this.hProtect();
  }

  var contentsStr = this.contents.join('');

  if (fs.existsSync(this.filename)) {
    var text1 = fs.readFileSync(this.filename, 'utf8');
    if (withoutGeneratedLine(text1) === contentsStr) {
      return;
    }
  }

  var fullContentsStr = '/* Generated by ' + process.argv.join(' ') + ' at ' + (new Date().toUTCString()) + ' */\n' + contentsStr;
  
  fs.writeFileSync(this.filename, fullContentsStr, 'utf8');
  util.puts('Wrote ' + this.filename);
};

CodeGen.prototype.hProtect = function() {
  var hpsym = 'INCLUDE_' + this.filename.replace(/[^a-zA-Z0-9]+/g, '_');
  this.contents.unshift('#define ' + hpsym + '\n');
  this.contents.unshift('#ifndef ' + hpsym + '\n');
  this.contents.push('#endif\n');
};


CodeGen.prototype.cIndent = function() {
  var braceLevel = 0;
  var parenLevel = 0;
  var spaces = '                                                                                ';
  this.contents = _.map(this.contents, function(l) {

    var ll = l.length;
    if (ll === 0 || l.charCodeAt(0) === 35) return l;
    var origBraceLevel = braceLevel;
    var origParenLevel = parenLevel;
    var inDoubleQuote = false;
    var inSingleQuote = false;
    var inSingleLineComment = false;
    var escaped;
    var lastc = 0;
    for (var i = 0; i < ll; i++) {
      var c = l.charCodeAt(i);
      if (c === 92) {
        escaped = true;
        continue;
      }
      if (c === 34 && !escaped) inDoubleQuote = !inDoubleQuote;
      if (c === 39 && !escaped) inSingleQuote = !inSingleQuote;
      if (!inDoubleQuote && !inSingleQuote && !inSingleLineComment) {
        if (c === 47 && lastc === 47) inSingleLineComment = true;
        if (c === 123) braceLevel++;
        if (c === 125) braceLevel--;
        if (c === 40) parenLevel++;
        if (c === 41) parenLevel--;
      }
      escaped = false;
      lastc = c;
    }
    var indentLevel = Math.min(braceLevel, origBraceLevel) * 2 + origParenLevel * 4;
    return spaces.substr(0, indentLevel) + l;
  });
};

CodeGen.prototype.line = function(code) {
  if (/(WARNING|ERROR)/.test(code)) {
    util.puts(code);
  }
  this.contents.push(code.trim() + '\n');
};

CodeGen.prototype.linef = function() {
  var self = this;
  return function(l) {
    self.line(l); 
  };
};

CodeGen.prototype.withSubs = function(subs) {
  return new CodeGenSubst(this, subs);
};


function CodeGenSubst(parent, subs) {
  this.parent = parent;
  this.subs = subs;

  this.subsPattern = new RegExp('(' + _.map(_.keys(this.subs), _.requote).join('|') + ')', 'g');
}

CodeGenSubst.prototype.line = function(code) {
  var parts = code.split(this.subsPattern);
  var subs = this.subs;
  code = _.map(parts, function(p, i) {
    if (i%2 === 1 && p in subs) {
      return subs[p];
    } else {
      return p;
    }
  }).join('');
  this.parent.line(code);
};
  
CodeGenSubst.prototype.withSubs = function(subs) {
  return new CodeGenSubst(this.parent, _.extend(_.clone(this.subs), subs));
};

CodeGenSubst.prototype.linef = CodeGen.prototype.linef;


// ----------------------------------------------------------------------

function FileGen(prefix) {
  this.prefix = prefix;
  this.files = {};
}

FileGen.prototype.getFile = function(name) {
  var fn = this.prefix + name;
  
  if (!(fn in this.files)) {
    this.files[fn] = new CodeGen(fn);
  }
  return this.files[fn];
};

FileGen.prototype.getLinef = function(name) {
  return this.getFile(name).linef();
};


FileGen.prototype.end = function() {
  _.each(this.files, function(cg) {
    cg.end();
  });
};


